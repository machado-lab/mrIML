plot_vi(VI=VI,  X=X,Y=Y, modelPerf=ModelPerf,  cutoff= 0.1, plot.pca='yes', model='regression')
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='regression')
profileData_pd <- light_profile(flashlightObj, v = "bio_1") #partial dependencies
mrProfileplot(profileData_pd , sdthresh =0.01)
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
profileData_pd <- light_profile(flashlightObj, v = "simple") #partial dependencies
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
profileData_pd <- light_profile(flashlightObj, v = "simple") #partial dependencies
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
plot(light_profile(flashlightObj, v = "simple", type = "ale"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
plot(light_profile(flashlightObj, v = "Forest", type = "ale"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
fl <- mrFlashlight(yhats, X, Y, response = "multi", index=1, model='classification') #index pointing to the SNP of interest (i.e. the first column)
plot(light_performance(fl), fill = "orange", rotate_x = TRUE) +
labs(x = element_blank()) +
theme(axis.text.x = element_text(size = 8))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#make sure you have installed devtools previously.
#Install the most uptodate version from github
#if (!requireNamespace("devtools", quietly = TRUE))
# install.packages("devtools")
#   devtools:: install_github('nfj1380/mrIML')
library(mrIML)
#other package we need:
library(vip); library(tidymodels); library(randomForest);  library(caret); library(gbm);
library(tidyverse);library(parallel); library(doParallel); library(themis); library(viridis);
library(janitor); library(hrbrthemes); library(xgboost); library(vegan);library(flashlight);
library(ggrepel); library(parsnip);library(rsample); library(workflows)
library(LEA)
#if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager") #LEA requires Biocmanager
#load SNP data
#Responsedata)
#if you have a plink dataset you can load it in to our pipeline with the following:
#snps <- readSnpsPed("snp.ped", "snp.map") #NAs in data and interpolated as the mode.
#landscape and host features (or predictors). Note that samples must be rows.
str(Features)
# # remove NAs from the feature/predictor data.
FeaturesnoNA<-Features[complete.cases(Features), ]
Y <- FeaturesnoNA #for simplicity
#for more efficent testing for interactions (more variables more interacting pairs)
Y <- FeaturesnoNA[c(1:3)] #three features only
#Optional: Filter rare/common SNPs or species. Retaining minor allelle frequncies >0.1 and removing common allelles (occur>0.9)
fData <- filterRareCommon (Responsedata, lower=0.4, higher=0.7)
X <- fData #for simplicity when comparing
#another option at this stage is to filter response that are strongly correlated with each other.
#df2 <- cor(X) #find correlations
#hc <-  findCorrelation(df2, cutoff=0.5) # put any value as a "cutoff".
#hc <-  sort(hc)
#X <-  X[,-c(hc)] #
model1 <-
rand_forest(trees = 100, mode = "classification") %>% #100 trees are set for brevity
# select the engine/package that underlies the model
set_engine("ranger", importance = c("impurity","impurity_corrected")) %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
yhats <- mrIMLpredicts(X=X,Y=Y, model1=model1, balance_data='no', mod='classification', parallel = TRUE) ## in MrTidymodels. Balanced data= up updamples and down downsampled to create a balanced set
# save the model
#save(yhats, file='rf_model')
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
mrProfileplot(profileData_pd , sdthresh =0.05) #sdthresh removes responses from the first plot that do not vary with the feature
mrProfileplot(profileData_ale , sdthresh =0.05)
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
mrProfileplot(profileData_pd , sdthresh =0.05) #sdthresh removes responses from the first plot that do not vary with the feature
profileData_ale <- light_profile(flashlightObj, v = "simple", type = "ale")
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
mrProfileplot(profileData_pd , sdthresh =0.05) #sdthresh removes responses from the first plot that do not vary with the feature
profileData_ale <- light_profile(flashlightObj, v = "multi", type = "ale")
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
mrProfileplot(profileData_pd , sdthresh =0.05) #sdthresh removes responses from the first plot that do not vary with the feature
profileData_ale <- light_profile(flashlightObj, v = "Grassland", type = "ale") #acumulated local effects
mrProfileplot(profileData_ale , sdthresh =0.01)
#the second plot is the cumulative turnover function
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
profileData_pd <- light_profile(flashlightObj, v = "simple")
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='classification')
#plot prediction scatter for all responses. Gets busy with
plot(light_scatter(flashlightObj, v = "Forest", type = "predicted"))
#plots everything on one plot (partial dependency, ALE, scatter)
plot(light_effects(flashlightObj, v = "Grassland"), use = "all")
profileData_pd <- light_profile(flashlightObj,  v = "Grassland")
mrProfileplot(profileData_pd , sdthresh =0.05) #sdthresh removes responses from the first plot that do not vary with the feature
profileData_ale <- light_profile(flashlightObj, v = "Grassland", type = "ale") #acumulated local effects
mrProfileplot(profileData_ale , sdthresh =0.01)
#the second plot is the cumulative turnover function
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_site()
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
template_navbar(path = ".")
pkgdown::build_site()
?template_navbar(path = ".")
usethis::use_pkgdown()
pkgdown::template_navbar()
sink("_pkgdown.yml")
template_navbar()
template_reference()
sink()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
?href
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
unlink('README_cache', recursive = TRUE)
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
fl <- mrFlashlight(yhats, X, Y, response = "multi", index=1, model='classification') #index pointing to the SNP of interest (i.e. the first column)
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
VI <- mrVip(yhats, Y=Y)
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#make sure you have installed devtools previously.
#Install the most uptodate version from github
#if (!requireNamespace("devtools", quietly = TRUE))
# install.packages("devtools")
#devtools:: install_github('nfj1380/mrIML')
library(mrIML)
#other package we need:
library(vip); library(tidymodels); library(randomForest);  library(caret); library(gbm);
library(tidyverse);library(parallel); library(doParallel); library(themis); library(viridis); library(janitor); library(hrbrthemes); library(xgboost); library(vegan);library(flashlight);
library(ggrepel)
library(LEA)
# read in data file with minor allele freqs & env/space variables
gfData; str(gfData)
envGF <- gfData[,3:13] # get climate & MEM variables
Y <- envGF #for simplicity
# build individual SNP datasets
SNPs_ref <- gfData[,grep("REFERENCE",colnames(gfData))] # reference
GI5 <- gfData[,grep("GI5",colnames(gfData))] # GIGANTEA-5 (GI5)
X <- GI5 #for this example we are going to focus on the adaptive SNPs in the GI5 region.
model1 <- #model used to generate yhat
# specify that the model is a random forest
linear_reg() %>%
# select the engine/package that underlies the model
set_engine("lm") %>%
# choose either the continuous regression or binary classification mode
set_mode("regression")
yhats <- mrIMLpredicts(X=X,Y=Y, model1=model1, balance_data='no', model='regression', parallel = TRUE) ## Balanced data= up updamples and down downsampled to create a balanced set. For regression 'no' has to be selected.
#save(yhats, file='Regression_lm') #always a good idea
ModelPerf <- mrIMLperformance(yhats, model1, X=X, model='regression')
ModelPerf[[1]] #predictive performance for individual responses.
ModelPerf[[2]]#overall average r2
p1 <- as.data.frame(ModelPerf[[1]])#save as a datframe to compare to other models.
p1
model1 <-
rand_forest(trees = 100, mode = "regression") %>%
set_engine("ranger", importance = c("impurity","impurity_corrected")) %>%
set_mode("regression")
yhats <- mrIMLpredicts(X=X,Y=Y, model1=model1, balance_data='no', model='regression', parallel = TRUE)
#save(yhats, file='Regression_rf')
ModelPerf <- mrIMLperformance(yhats, model1, X=X, model='regression')
ModelPerf[[1]] #predictive performance for individual responses.
ModelPerf[[2]]#overall average r2
p2 <- as.data.frame(ModelPerf[[1]])
p2
VI <- mrVip(yhats, Y=Y)
plot_vi(VI=VI,  X=X,Y=Y, modelPerf=ModelPerf,  cutoff= 0.1, plot.pca='yes', model='regression')
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrFlashlight.R"))
source(("C:/Users/gmachad/Desktop/mrIML_package/R/mrProfileplots.R"))
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='regression')
profileData_pd <- light_profile(flashlightObj, v = "bio_1") #partial dependencies
mrProfileplot(profileData_pd , sdthresh =0.01)
flashlightObj <- mrFlashlight(yhats, X, Y, response = "single", model='regression')
profileData_pd <- light_profile(flashlightObj, v = "bio_1") #partial dependencies
mrProfileplot(profileData_pd , sdthresh =0.01)
flashlightObj <- mrFlashlight(yhats, X, Y, response = "multi", model='regression')
profileData_pd <- light_profile(flashlightObj, v = "bio_1") #partial dependencies
profileData_pd <- light_profile(flashlightObj, v = "bio_1") #partial dependencies
mrProfileplot(profileData_pd , sdthresh =0.01)
profileData_ale <- light_profile(flashlightObj, v = "bio_1", type = "ale") #acumulated local effects
mrProfileplot(profileData_ale , sdthresh =0.01)
pkgdown::build_site()
sink()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
sink()
pkgdown::build_site()
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
sink()
pkgdown::build_site()
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
init_site()
sink()
pkgdown::build_site()
sink()
pkgdown::build_site()
?template_navbar()
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
init_site()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
init_site()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
init_site()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
#init_site()
sink()
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
template_articles()
#init_site()
sink()
pkgdown::build_site()
pkgdown::build_site()
?build_site()
pkgdown::build_site()
?bootswatch
?bootswatch: cerulean
build_home()
build_news()
pkgdown::build_site()
build_news()
pkgdown::build_site()
build_news()
pkgdown::build_site()
build_home()
build_articles()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
interactions <-mrInteractions(yhats, X, Y,  mod='classification') #this is computationally intensive so multicores are needed. If stopped prematurely - have to reload things
#make sure you have installed devtools previously.
#Install the most uptodate version from github
#if (!requireNamespace("devtools", quietly = TRUE))
# install.packages("devtools")
#   devtools:: install_github('nfj1380/mrIML')
library(mrIML)
#other package we need:
library(vip); library(tidymodels); library(randomForest);  library(caret); library(gbm);
library(tidyverse);library(parallel); library(doParallel); library(themis); library(viridis);
library(janitor); library(hrbrthemes); library(xgboost); library(vegan);library(flashlight);
library(ggrepel); library(parsnip);library(rsample); library(workflows)
library(LEA)
#if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager") #LEA requires Biocmanager
#load SNP data
#Responsedata)
#if you have a plink dataset you can load it in to our pipeline with the following:
#snps <- readSnpsPed("snp.ped", "snp.map") #NAs in data and interpolated as the mode.
#landscape and host features (or predictors). Note that samples must be rows.
str(Features)
# # remove NAs from the feature/predictor data.
FeaturesnoNA<-Features[complete.cases(Features), ]
Y <- FeaturesnoNA #for simplicity
#for more efficent testing for interactions (more variables more interacting pairs)
Y <- FeaturesnoNA[c(1:3)] #three features only
#Optional: Filter rare/common SNPs or species. Retaining minor allelle frequncies >0.1 and removing common allelles (occur>0.9)
fData <- filterRareCommon (Responsedata, lower=0.4, higher=0.7)
X <- fData #for simplicity when comparing
#another option at this stage is to filter response that are strongly correlated with each other.
#df2 <- cor(X) #find correlations
#hc <-  findCorrelation(df2, cutoff=0.5) # put any value as a "cutoff".
#hc <-  sort(hc)
#X <-  X[,-c(hc)] #
model1 <-
rand_forest(trees = 100, mode = "classification") %>% #100 trees are set for brevity
# select the engine/package that underlies the model
set_engine("ranger", importance = c("impurity","impurity_corrected")) %>%
# choose either the continuous regression or binary classification mode
set_mode("classification")
yhats <- mrIMLpredicts(X=X,Y=Y, model1=model1, balance_data='no', mod='classification', parallel = TRUE) ## in MrTidymodels. Balanced data= up updamples and down downsampled to create a balanced set
# save the model
#save(yhats, file='rf_model')
interactions <-mrInteractions(yhats, X, Y,  mod='classification') #this is computationally intensive so multicores are needed. If stopped prematurely - have to reload things
mrPlot_interactions(interactions, X,Y, top_ranking = 5, top_response=5)
pkgdown::build_site()
interactions <-mrInteractions(yhats, X, Y,  mod='classification') #this is computationally intensive so multicores are needed. If stopped prematurely - have to reload things
mrPlot_interactions(interactions, X,Y, top_ranking = 5, top_response=5)
mrPlot_interactions(interactions, X,Y, top_ranking = 2, top_response=2)
pkgdown::build_site()
build_news()
pkgdown::build_site()
build_articles()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
build_news()
build_home()
pkgdown::build_site()
build_news()
build_home()
build_articles()
pkgdown::build_site()
build_news()
pkgdown::build_site()
pkgdown::build_site()
build_news()
pkgdown::build_site()
build_news()
usethis::use_mit_license(name = "Gustavo Machado")
